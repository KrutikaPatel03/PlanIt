@using P4PlanLib.Model

<div style="display: flex; 
            flex-direction: column; 
            height: 100%;
            padding: 0.75rem;
            gap: 0.75rem;">
    
    <h4 style="margin: 0; 
               color: #1a1a1a; 
               font-weight: 600; 
               font-size: 0.875rem;">
        Comments (@Comments.Count)
    </h4>

    @if (Comments.Count == 0)
    {
        <div style="text-align: center; 
                    padding: 1rem; 
                    color: #9ca3af;
                    display: flex; 
                    flex-direction: column; 
                    align-items: center; 
                    gap: 0.5rem;
                    flex: 1;
                    justify-content: center;
                    border-radius: 8px; 
                    border: 1px solid #e5e7eb; 
                    background: #fff;">
            <div style="font-size: 1.5rem;">üí¨</div>
            <p style="margin: 0; font-size: 0.75rem;">No comments yet</p>
        </div>
    }
    else
    {
        var lastComment = Comments.LastOrDefault();
        if (lastComment != null)
        {
            <div style="border-radius: 8px; 
                        border: 1px solid #e5e7eb; 
                        background: #fff; 
                        padding: 0.75rem;
                        flex: 1;
                        overflow-y: auto;
                        min-height: 0;">

                <div style="display: flex; 
                            align-items: center; 
                            gap: 0.5rem; 
                            margin-bottom: 0.5rem;">
                    <UserComponent Users="@GetCommentUser(lastComment)" 
                                   DisplayMode="UserComponent.UserDisplayMode.CommentAvatar" />
                    <div style="flex: 1; 
                                min-width: 0;">
                        <div style="font-weight: 600; 
                                    color: #1f2937; 
                                    font-size: 0.75rem;">
                            @(lastComment.PostedBy?.Name ?? lastComment.CreatedBy ?? "Unknown User")
                        </div>
                        <div style="color: #9ca3af; 
                                    font-size: 0.625rem;">
                            @GetFormattedDate(lastComment)
                        </div>
                    </div>
                    @if (Comments.Count > 1)
                    {
                        <div style="color: #6b7280; 
                                    font-size: 0.625rem; 
                                    background: #f3f4f6; 
                                    padding: 0.25rem 0.5rem; 
                                    border-radius: 4px;">
                            +@(Comments.Count - 1) more
                        </div>
                    }
                </div>
                
                <div style="white-space: pre-wrap; 
                            color: #374151; 
                            line-height: 1.4; 
                            margin-left: 2rem; 
                            font-size: 0.75rem;
                            max-height: 80px;
                            overflow-y: auto;
                            word-break: break-word;">
                    @lastComment.Text
                </div>
                
                @if (lastComment.Attachments != null && lastComment.Attachments.Length > 0)
                {
                    <div style="margin-top: 0.5rem; 
                                margin-left: 2rem;">
                        <div style="color: #6b7280; 
                                    font-size: 0.625rem; 
                                    font-weight: 600;">
                            üìé @lastComment.Attachments.Length attachment(s)
                        </div>
                    </div>
                }
            </div>
        }
    }

    <div style="border-radius: 8px; 
                border: 1px solid #e5e7eb; 
                background: #fff; 
                padding: 0.75rem;
                flex-shrink: 0;">
        
        <h5 style="margin: 0 0 0.5rem 0; 
                   color: #1f2937; 
                   font-weight: 600; 
                   font-size: 0.75rem;">
            Quick Reply
        </h5>
        
        <div style="display: flex; 
                    gap: 0.5rem; 
                    align-items: flex-start;">
            <textarea value="@NewCommentText" 
                      @onchange="OnTextChanged" 
                      style="flex: 1;
                             min-height: 40px; 
                             max-height: 60px; 
                             resize: vertical; 
                             border-radius: 6px; 
                             border: 1px solid #e5e7eb; 
                             padding: 0.5rem; 
                             background: #fff; 
                             font-family: inherit; 
                             font-size: 0.75rem; 
                             line-height: 1.4; 
                             transition: border-color 0.2s ease;
                             box-sizing: border-box;"
                      placeholder="Quick reply..."
                      onfocus="this.style.borderColor='#007acc'"
                      onblur="this.style.borderColor='#e5e7eb'"></textarea>
            
            <button @onclick="PostComment" 
                    disabled="@(string.IsNullOrWhiteSpace(NewCommentText) || PostingComment)" 
                    style="padding: 0.5rem 0.75rem; 
                           border-radius: 6px; 
                           border: none; 
                           background: @(string.IsNullOrWhiteSpace(NewCommentText) || PostingComment ? "#e5e7eb" : "linear-gradient(135deg, #007acc, #005a99)"); 
                           color: @(string.IsNullOrWhiteSpace(NewCommentText) || PostingComment ? "#9ca3af" : "white"); 
                           cursor: @(string.IsNullOrWhiteSpace(NewCommentText) || PostingComment ? "not-allowed" : "pointer"); 
                           font-size: 0.75rem; 
                           font-weight: 600; 
                           transition: all 0.2s ease;
                           white-space: nowrap;
                           min-width: 50px;
                           flex-shrink: 0;">
                @if (PostingComment)
                {
                    <span>‚è≥</span>
                }
                else
                {
                    <span>Reply</span>
                }
            </button>
        </div>
        
        @if (!string.IsNullOrEmpty(PostCommentError))
        {
            <div style="color: #dc2626; 
                        font-size: 0.625rem; 
                        margin-top: 0.5rem;
                        display: flex; 
                        align-items: center; 
                        gap: 0.25rem;
                        background: #fef2f2; 
                        padding: 0.25rem 0.5rem; 
                        border-radius: 4px; 
                        border: 1px solid #fecaca;">
                <span>‚ö†Ô∏è</span>
                <span>@PostCommentError</span>
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public List<Comment> Comments { get; set; } = new();

    [Parameter]
    public string NewCommentText { get; set; } = string.Empty;

    [Parameter]
    public EventCallback<string> OnNewCommentTextChanged { get; set; }

    [Parameter]
    public bool PostingComment { get; set; }

    [Parameter]
    public string PostCommentError { get; set; } = string.Empty;

    [Parameter]
    public EventCallback<string> OnPostComment { get; set; }

    private async Task PostComment()
    {
        await OnPostComment.InvokeAsync(NewCommentText);
    }

    private async Task OnTextChanged(ChangeEventArgs e)
    {
        var value = e.Value?.ToString() ?? string.Empty;
        await OnNewCommentTextChanged.InvokeAsync(value);
    }

    private IEnumerable<string> GetCommentUser(Comment comment)
    {
        if (!string.IsNullOrWhiteSpace(comment.PostedBy?.Name))
        {
            return new[] { comment.PostedBy.Name };
        }
        if (!string.IsNullOrWhiteSpace(comment.CreatedBy))
        {
            return new[] { comment.CreatedBy };
        }
        return new[] { "Unknown User" };
    }

    private string GetFormattedDate(Comment comment)
    {
        if (!string.IsNullOrWhiteSpace(comment.PostedAt))
        {
            return comment.PostedAt;
        }
        
        var timeAgo = DateTime.Now - comment.CreatedAt;
        if (timeAgo.TotalMinutes < 1)
            return "Just now";
        if (timeAgo.TotalHours < 1)
            return $"{(int)timeAgo.TotalMinutes}m ago";
        if (timeAgo.TotalDays < 1)
            return $"{(int)timeAgo.TotalHours}h ago";
        if (timeAgo.TotalDays < 7)
            return $"{(int)timeAgo.TotalDays}d ago";
        
        return comment.CreatedAt.ToString("MMM dd");
    }
}

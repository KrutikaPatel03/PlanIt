@using P4PlanLib.Model
<MudStack Spacing="2" Style="min-width:300px;">

    <!-- Header -->
    <MudText Typo="Typo.h6" FontWeight="FontWeight.SemiBold">
        Comments (@Comments.Count)
    </MudText>

    <!-- Comments List -->
    <MudPaper Elevation="3" Class="rounded-xl bg-white"
              Style="flex:1;min-height:300px;max-height:400px;overflow:hidden;display:flex;flex-direction:column;">

        @if (Comments.Count == 0)
        {
            <MudStack AlignItems="AlignItems.Center" JustifyContent="Center" Spacing="1" Class="py-8 text-gray-400">
                <MudText Typo="Typo.h4">üí¨</MudText>
                <MudText Typo="Typo.body2">No comments yet. Be the first to comment!</MudText>
            </MudStack>
        }
        else
        {
            <MudStack Spacing="3">
                @foreach (var comment in Comments)
                {
                    <MudPaper Class="pb-4 border-b border-gray-100" Elevation="0">
                        <!-- Comment Header -->
                        <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1" Class="mb-2">
                            <UserComponent Users="@GetCommentUser(comment)"
                                           DisplayMode="UserComponent.UserDisplayMode.CommentAvatar" />
                            <MudStack Style="flex:1;min-width:0;">
                                <MudText Typo="Typo.body2" FontWeight="FontWeight.SemiBold" Color="Color.Default">
                                    @(comment.PostedBy?.Name ?? "Unknown User")
                                </MudText>
                                <MudText Typo="Typo.caption" Color="Color.Secondary">
                                    @comment.PostedAt
                                </MudText>
                            </MudStack>
                        </MudStack>

                        <!-- Comment Text -->
                        <MudText Typo="Typo.body2" Class="ml-10 text-gray-700" Style="white-space:pre-wrap;">
                            @comment.Text
                        </MudText>

                        <!-- Attachments -->
                        @if (comment.Attachments != null && comment.Attachments.Length > 0)
                        {
                            <MudStack Class="ml-10 mt-3">
                                <MudText Typo="Typo.caption" FontWeight="FontWeight.Medium" Color="Color.Secondary">
                                    üìé Attachments
                                </MudText>
                                <MudStack Row="true" Wrap="Wrap.Wrap" Spacing="1">
                                    @foreach (var att in comment.Attachments)
                                    {
                                        <MudChip T="string" Color="Color.Default" Variant="Variant.Outlined" Class="text-sm">
                                            <span class="font-medium">@att.Path</span>
                                            <span class="text-gray-400 ml-1">(@att.Size bytes)</span>
                                        </MudChip>
                                    }
                                </MudStack>
                            </MudStack>
                        }
                    </MudPaper>
                }
            </MudStack>
        }

    </MudPaper>

    <!-- Comment Input -->
    <MudPaper Elevation="3" Class="rounded-xl bg-white pa-6">
        <MudText Typo="Typo.h6" FontWeight="FontWeight.SemiBold" Class="mb-4">
            Add a comment
        </MudText>

        <MudTextField @bind-Value="NewCommentText"
                      Placeholder="Write your comment here..."
                      Lines="4"
                      Variant="Variant.Outlined"
                      Class="w-full mb-4"
                      Immediate="true"
                      OnBlur="@(async _ => await OnNewCommentTextChanged.InvokeAsync(NewCommentText))" />

        <MudStack Row="true" JustifyContent="SpaceBetween" AlignItems="AlignItems.Center">
            <MudButton OnClick="PostComment"
                       Variant="Variant.Filled"
                       Disabled="@((string.IsNullOrWhiteSpace(NewCommentText) || PostingComment))"
                       Color="Color.Primary"
                       Class="font-semibold">
                @if (PostingComment)
                {
                    <MudText Typo="Typo.body2">üîÑ Posting...</MudText>
                }
                else
                {
                    <MudText Typo="Typo.body2">Post Comment</MudText>
                }
            </MudButton>

            @if (!string.IsNullOrEmpty(PostCommentError))
            {
                <MudAlert Severity="Severity.Error" Variant="Variant.Outlined" Dense="true" Class="text-sm">
                    ‚ö†Ô∏è @PostCommentError
                </MudAlert>
            }
        </MudStack>
    </MudPaper>
</MudStack>

@code {
    [Parameter]
    public List<Comment> Comments { get; set; } = new();

    [Parameter]
    public string NewCommentText { get; set; } = string.Empty;

    [Parameter]
    public EventCallback<string> OnNewCommentTextChanged { get; set; }

    [Parameter]
    public bool PostingComment { get; set; }

    [Parameter]
    public string PostCommentError { get; set; } = string.Empty;

    [Parameter]
    public EventCallback<string> OnPostComment { get; set; }

    private async Task PostComment()
    {
        await OnPostComment.InvokeAsync(NewCommentText);
    }

    private IEnumerable<string> GetCommentUser(Comment comment)
    {
        if (!string.IsNullOrWhiteSpace(comment.PostedBy?.Name))
            return new[] { comment.PostedBy.Name };
        return new[] { "Unknown User" };
    }
}
